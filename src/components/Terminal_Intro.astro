---
/**
 * TerminalIntro.astro
 * A hero-style fake terminal banner with ASCII art (updated with user's version),
 * neon cyan glow, startup CRT-style flicker (once), and staged boot lines.
 */
interface Props {
  title?: string;
  ascii?: string;
}
const {
  title = "Welcome to my Projects",
  ascii = `
__          __  _                            _                            _____           _           _       
 \\ \\        / / | |                          | |                          |  __ \\         (_)         | |      
  \\ \\  /\\  / /__| | ___ ___  _ __ ___   ___  | |_ ___    _ __ ___  _   _  | |__) | __ ___  _  ___  ___| |_ ___ 
   \\ \\/  \\/ / _ \\ |/ __/ _ \\| '_ \` _ \\ / _ \\ | __/ _ \\  | '_ \` _ \\| | | | |  ___/ '__/ _ \\| |/ _ \\/ __| __/ __|
    \\  /\\  /  __/ | (_| (_) | | | | | |  __/ | || (_) | | | | | | | |_| | | |   | | | (_) | |  __/ (__| |_\\__ \\
     \\/  \\/ \\___|_|\\___\\___/|_| |_| |_|\\___|  \\__\\___/  |_| |_| |_|\\__, | |_|   |_|  \\___/| |\\___|\\___|\\__|___/
                                                                    __/ |                _/ |                  
                                                                   |___/                |__/                   
`,
} = Astro.props as Props;
---

<section class="terminal-hero" aria-labelledby="projects-terminal-title">
  <h1 id="projects-terminal-title" class="sr-only">{title}</h1>
  <div class="terminal">
    <pre class="ascii" aria-hidden="true">{ascii}</pre>
    <div class="console" aria-live="polite" aria-atomic="true">
      <div class="line" id="init-line">
        &gt; <span>Initializing</span><span id="dots" aria-hidden="true"></span>
      </div>
      <div class="line ready" id="ready-line" hidden>
        &gt; <span class="k">Ready.</span>
      </div>
    </div>
    <a
      class="see-more"
      href="https://github.com/GallarJ1?tab=repositories"
      target="_blank"
      rel="noopener noreferrer"
      aria-label="See more projects"
    >
      See more projects â†’
    </a>
  </div>
</section>

<style>
  :root {
    --neon-cyan: #00e5ff;
    --neon-green: #39ff14;
    --terminal-text: #e6e6e6;
    --terminal-bg: #0b0e12;
    --terminal-border: rgba(0, 229, 255, 0.35);
  }
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 1px, 1px);
    white-space: nowrap;
    border: 0;
  }

  .terminal-hero {
    width: 100%;
    display: grid;
    place-items: center;
    padding: clamp(24px, 4vw, 48px) 16px;
  }
  .terminal {
    width: min(1200px, 95vw);
    background: var(--terminal-bg);
    color: var(--terminal-text);
    border: 1px solid var(--terminal-border);
    border-radius: 18px;
    padding: clamp(16px, 3vw, 32px);
    position: relative;
    box-shadow:
      0 0 0px rgba(0, 0, 0, 0.2),
      0 0 28px rgba(0, 229, 255, 0.08);
    animation: framePulse 4.5s ease-in-out infinite;
  }

  @keyframes framePulse {
    0% {
      box-shadow:
        0 0 0px rgba(0, 0, 0, 0.2),
        0 0 22px rgba(0, 229, 255, 0.06);
    }
    50% {
      box-shadow:
        0 0 0px rgba(0, 0, 0, 0.2),
        0 0 34px rgba(0, 229, 255, 0.12);
    }
    100% {
      box-shadow:
        0 0 0px rgba(0, 0, 0, 0.2),
        0 0 22px rgba(0, 229, 255, 0.06);
    }
  }

  .terminal::after {
    content: "";
    position: absolute;
    inset: 0;
    pointer-events: none;
    background: repeating-linear-gradient(
      0deg,
      rgba(255, 255, 255, 0.02) 0px,
      rgba(255, 255, 255, 0.02) 1px,
      transparent 1px,
      transparent 3px
    );
    mix-blend-mode: overlay;
    opacity: 0.08;
    animation: crtFlicker 3.5s infinite ease-in-out alternate;
  }

  @keyframes crtFlicker {
    0% {
      opacity: 0.06;
      filter: brightness(1) contrast(1);
    }
    25% {
      opacity: 0.09;
      filter: brightness(1.03) contrast(1.01);
    }
    50% {
      opacity: 0.07;
      filter: brightness(1.02) contrast(1.02);
    }
    75% {
      opacity: 0.1;
      filter: brightness(1.04) contrast(1.03);
    }
    100% {
      opacity: 0.06;
      filter: brightness(1) contrast(1);
    }
  }

  .ascii {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
      "Liberation Mono", "Courier New", monospace;
    font-size: clamp(10px, 1.4vw, 16px);
    line-height: 1.05;
    color: var(--neon-cyan);
    text-shadow: 0 0 6px rgba(0, 229, 255, 0.35);
    white-space: pre;
    margin: 0 0 clamp(12px, 2vw, 20px) 0;
    overflow: hidden;
  }

  .console {
    font-family: inherit;
  }
  .line {
    opacity: 0.95;
  }
  .line .k {
    color: var(--neon-green);
    text-shadow: 0 0 6px rgba(57, 255, 20, 0.35);
  }

  @media (prefers-reduced-motion: reduce) {
    .terminal {
      animation: none !important;
    }
    .terminal[data-flicker]::after {
      animation: none !important;
      opacity: 0 !important;
    }
  }

  .see-more {
    position: absolute;
    right: clamp(14px, 2vw, 20px);
    bottom: clamp(12px, 2vw, 18px);
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 8px 14px;
    border-radius: 10px;
    border: 1px solid rgba(0, 229, 255, 0.35);
    background: rgba(0, 25, 32, 0.45);
    color: #dff9ff;
    font-family: "JetBrains Mono", ui-monospace, monospace;
    font-size: 13px;
    text-decoration: none;
    box-shadow: 0 0 18px rgba(0, 255, 255, 0.1);
    transition:
      transform 0.15s ease,
      box-shadow 0.15s ease,
      border-color 0.15s ease;
  }
  .see-more:hover {
    transform: translateY(-1px);
    border-color: rgba(0, 229, 255, 0.55);
    box-shadow: 0 0 22px rgba(0, 255, 255, 0.18);
  }
  .see-more:active {
    transform: translateY(0);
  }
</style>

<script>
  (function () {
    const prefersReduced = window.matchMedia(
      "(prefers-reduced-motion: reduce)"
    ).matches;
    const dots = document.getElementById("dots");
    const ready = document.getElementById("ready-line");
    const term = document.querySelector(".terminal");

    const beats = [".", "..", "..."];
    let i = 0;
    const step = () => {
      if (!dots) return;
      dots.textContent = beats[i];
      i++;
      if (i < beats.length) {
        setTimeout(step, 360);
      } else {
        setTimeout(() => {
          if (ready) ready.hidden = false;
        }, 260);
        setTimeout(() => {
          term?.removeAttribute("data-flicker");
        }, 600);
      }
    };
    setTimeout(step, 240);
  })();
</script>
